// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(NotiAppContext))]
    [Migration("20231014221508_FourthMigration")]
    partial class FourthMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DescAccion")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("auditoria", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Blockchain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("HashGenerado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdAuditoriaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdHiloRespuestaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoNotificacionesFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAuditoriaFk");

                    b.HasIndex("IdHiloRespuestaFk");

                    b.HasIndex("IdTipoNotificacionesFk");

                    b.ToTable("blockchain", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EstadoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreEstadoNotificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("estadonotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Formato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreFormato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("formato", (string)null);
                });

            modelBuilder.Entity("Core.Entities.GenericovsSubmodulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int>("IdMaestrovsSubmodulosFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPermisoGenericoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMaestrovsSubmodulosFk");

                    b.HasIndex("IdPermisoGenericoFk");

                    b.HasIndex("IdRolFk");

                    b.ToTable("genericovssubmodulo", (string)null);
                });

            modelBuilder.Entity("Core.Entities.HiloRespuestaNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreHiloRespuesta")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("hilorespuestanotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MaestrosvsSubmodulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int>("IdModulosMaestroFk")
                        .HasColumnType("int");

                    b.Property<int>("IdSubModulosFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdModulosMaestroFk");

                    b.HasIndex("IdSubModulosFk");

                    b.ToTable("maestrovssubmodulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModuloNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AsuntoNotificacion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int>("IdEstadoNotificacionFk")
                        .HasColumnType("int");

                    b.Property<int>("IdFormatosFk")
                        .HasColumnType("int");

                    b.Property<int>("IdHiloRespuestaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRadicadosFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoNotificacionesFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoRequerimientoFk")
                        .HasColumnType("int");

                    b.Property<string>("TextoNotificacion")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstadoNotificacionFk");

                    b.HasIndex("IdFormatosFk");

                    b.HasIndex("IdHiloRespuestaFk");

                    b.HasIndex("IdRadicadosFk");

                    b.HasIndex("IdTipoNotificacionesFk");

                    b.HasIndex("IdTipoRequerimientoFk");

                    b.ToTable("modulonotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModulosMaestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreModuloMaestro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("modulosmaestro", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PermisosGenericos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombrePermiso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("permisosgenericos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Radicados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("radicados", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Core.Entities.RolvsMaestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int>("IdModulosMaestroFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdModulosMaestroFk");

                    b.HasIndex("IdRolFk");

                    b.ToTable("rolvsmaestro", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SubModulos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreSubModulo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("submodulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreTipoNotificacion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("tiponotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoRequerimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreTipoRequerimiento")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("tiporequerimiento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Blockchain", b =>
                {
                    b.HasOne("Core.Entities.Auditoria", "Auditorias")
                        .WithMany("Blockchains")
                        .HasForeignKey("IdAuditoriaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HiloRespuestaNotificacion", "HiloRespuestaNotificaciones")
                        .WithMany("Blockchains")
                        .HasForeignKey("IdHiloRespuestaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoNotificacion", "TipoNotificaciones")
                        .WithMany("Blockchains")
                        .HasForeignKey("IdTipoNotificacionesFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorias");

                    b.Navigation("HiloRespuestaNotificaciones");

                    b.Navigation("TipoNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.GenericovsSubmodulos", b =>
                {
                    b.HasOne("Core.Entities.MaestrosvsSubmodulos", "MaestrosvsSubmodulos")
                        .WithMany("GenericovsSubmodulos")
                        .HasForeignKey("IdMaestrovsSubmodulosFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.PermisosGenericos", "PermisosGenericos")
                        .WithMany("GenericovsSubmodulos")
                        .HasForeignKey("IdPermisoGenericoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Rol", "Rols")
                        .WithMany("GenericovsSubmodulos")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaestrosvsSubmodulos");

                    b.Navigation("PermisosGenericos");

                    b.Navigation("Rols");
                });

            modelBuilder.Entity("Core.Entities.MaestrosvsSubmodulos", b =>
                {
                    b.HasOne("Core.Entities.ModulosMaestro", "ModulosMaestros")
                        .WithMany("MaestrosvsSubmodulos")
                        .HasForeignKey("IdModulosMaestroFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SubModulos", "SubModulos")
                        .WithMany("MaestrosvsSubmodulos")
                        .HasForeignKey("IdSubModulosFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModulosMaestros");

                    b.Navigation("SubModulos");
                });

            modelBuilder.Entity("Core.Entities.ModuloNotificacion", b =>
                {
                    b.HasOne("Core.Entities.EstadoNotificacion", "EstadoNotificaciones")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdEstadoNotificacionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Formato", "Formatos")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdFormatosFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HiloRespuestaNotificacion", "HiloRespuestaNotificaciones")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdHiloRespuestaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Radicados", "Radicados")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdRadicadosFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoNotificacion", "TipoNotificaciones")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdTipoNotificacionesFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoRequerimiento", "TipoRequerimientos")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdTipoRequerimientoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoNotificaciones");

                    b.Navigation("Formatos");

                    b.Navigation("HiloRespuestaNotificaciones");

                    b.Navigation("Radicados");

                    b.Navigation("TipoNotificaciones");

                    b.Navigation("TipoRequerimientos");
                });

            modelBuilder.Entity("Core.Entities.RolvsMaestro", b =>
                {
                    b.HasOne("Core.Entities.ModulosMaestro", "ModulosMaestros")
                        .WithMany("RolvsMaestros")
                        .HasForeignKey("IdModulosMaestroFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Rol", "Rols")
                        .WithMany("RolvsMaestros")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModulosMaestros");

                    b.Navigation("Rols");
                });

            modelBuilder.Entity("Core.Entities.Auditoria", b =>
                {
                    b.Navigation("Blockchains");
                });

            modelBuilder.Entity("Core.Entities.EstadoNotificacion", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.Formato", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.HiloRespuestaNotificacion", b =>
                {
                    b.Navigation("Blockchains");

                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.MaestrosvsSubmodulos", b =>
                {
                    b.Navigation("GenericovsSubmodulos");
                });

            modelBuilder.Entity("Core.Entities.ModulosMaestro", b =>
                {
                    b.Navigation("MaestrosvsSubmodulos");

                    b.Navigation("RolvsMaestros");
                });

            modelBuilder.Entity("Core.Entities.PermisosGenericos", b =>
                {
                    b.Navigation("GenericovsSubmodulos");
                });

            modelBuilder.Entity("Core.Entities.Radicados", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Navigation("GenericovsSubmodulos");

                    b.Navigation("RolvsMaestros");
                });

            modelBuilder.Entity("Core.Entities.SubModulos", b =>
                {
                    b.Navigation("MaestrosvsSubmodulos");
                });

            modelBuilder.Entity("Core.Entities.TipoNotificacion", b =>
                {
                    b.Navigation("Blockchains");

                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.TipoRequerimiento", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
